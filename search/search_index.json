{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-fxgui","title":"What is fxgui","text":"<p>Custom Python classes and utilities tailored for Qt built UI, in VFX-oriented DCC applications.</p> <p>Note</p> <p>This documentation is updated regularly to reflect the most recent changes. If you spot any issue or have a feature request, don't hesitate to send me an email.</p>"},{"location":"examples/","title":"examples","text":"<p>::: fxgui.examples     options:       show_source: true</p>"},{"location":"fxdcc/","title":"fxdcc","text":"<p>::: fxgui.fxdcc</p>"},{"location":"fxicons/","title":"fxicons","text":"<p>::: fxgui.fxicons</p>"},{"location":"fxstyle/","title":"fxstyle","text":"<p>::: fxgui.fxstyle</p>"},{"location":"fxutils/","title":"fxutils","text":"<p>::: fxgui.fxutils</p>"},{"location":"fxwidgets/","title":"fxwidgets","text":"<p>::: fxgui.fxwidgets</p>"},{"location":"how_to/","title":"How-to","text":""},{"location":"how_to/#style-an-existing-application","title":"Style an Existing Application","text":"<p>In the case where you already have made some custom applications, and don't want to be bothered by subclassing the widgets inside the fxwidgets module but still want all applications to look and feel the same, you can call the <code>fxstyle.load_stylesheet()</code> function and apply the returned stylesheet to your current application/widget.</p> <pre><code>from fxgui import fxstyle\n\napplication = QApplication()\napplication.setStyleSheet(fxstyle.load_stylesheet())\n</code></pre> <p>Note</p> <p>You can set this stylesheet on a <code>QMainWindow</code>, <code>QWidget</code>, etc.</p> <p>Note</p> <p>You can pass extra arguments to the load_stylesheet() function.</p>"},{"location":"how_to/#apply-the-custom-google-material-icons","title":"Apply the Custom Google Material Icons","text":"<p>You can find a <code>QProxyStyle</code> subclass in fxstyle, called <code>FXProxyStyle</code>. When used on a <code>QApplication</code> instance, it allows you to switch the defaults icons provided by <code>Qt</code> for Google Material icons.</p> <pre><code>from fxgui import fxstyle\n\napplication = QApplication()\napplication.setStyle(fxstyle.FXProxyStyle())\n</code></pre> <p>Note</p> <p>By default, the <code>FXApplication</code> found inside fxwidgets alreayd applies this custom style.</p> <p>Warning</p> <p>Applying the <code>FXProxyStyle</code> is only allowed on a <code>QApplication</code> instance! So if you're instanciating a <code>FXMainWindow</code> inside a parent DCC, do not set the style on it.</p>"}]}