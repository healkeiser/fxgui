{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-pyside2-vfx-template","title":"What is PySide2 VFX Template","text":"<p>Custom Python classes and utilities tailored for PySide2 built UI, in VFX-oriented DCC applications.</p> <p>Note</p> <p>This documentation is updated regularly to reflect the most recent changes. If you spot any issue or have a feature request, don't hesitate to send me an email.</p>"},{"location":"actions/","title":"actions","text":"<p>Scripts related to the QAction.</p>"},{"location":"actions/#pyside2_vfx_template.actions.create_action","title":"create_action","text":"<pre><code>create_action(\n    parent: QWidget,\n    name: str,\n    icon: str,\n    trigger: Callable,\n    enable: bool = True,\n    visible: bool = True,\n    shortcut: str = None,\n) -&gt; Union[QAction, None]\n</code></pre> <p>Creates a QACtion.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget</code> <p>Parent object.</p> required <code>name</code> <code>str</code> <p>Name to display.</p> required <code>icon</code> <code>str</code> <p>Icon path.</p> required <code>trigger</code> <code>Callable</code> <p>Function to trigger when clicked.</p> required <code>enable</code> <code>bool</code> <p>Enable/disable. Defaults to <code>True</code>.</p> <code>True</code> <code>visible</code> <code>bool</code> <p>Show/hide. Defaults to <code>True</code>.</p> <code>True</code> <code>shortcut</code> <code>str</code> <p>If not <code>None</code>, key sequence (hotkeys) to use. Defaults to <code>None</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[QAction, None]</code> <p>Union[QAction, None]:</p>"},{"location":"dcc/","title":"dcc","text":"<p>Utility functions for retrieving main windows of DCC applications.</p> Note <p>To avoid potential <code>ModuleImportError</code>s, each DCC module (e.g., <code>hou</code>, <code>nuke</code>) is imported within its own function. This approach ensures that attempting to  use a function like <code>get_houdini_main_window</code> only triggers the import of <code>hou</code>, even if the main program lacks access to other modules like <code>nuke</code> or <code>OpenMayaUI</code>.</p>"},{"location":"dcc/#pyside2_vfx_template.dcc.get_houdini_main_window","title":"get_houdini_main_window","text":"<pre><code>get_houdini_main_window() -&gt; QtWidgets.QWidget\n</code></pre> <p>Get the Houdini main window.</p> <p>Returns:</p> Type Description <code>QWidget</code> <p>PySide2.QtWidgets.QWidget: <code>QWidget</code> Houdini main window.</p>"},{"location":"dcc/#pyside2_vfx_template.dcc.get_houdini_stylesheet","title":"get_houdini_stylesheet","text":"<pre><code>get_houdini_stylesheet() -&gt; str\n</code></pre> <p>Get the Houdini stylesheet.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The Houdini stylesheet.</p>"},{"location":"dcc/#pyside2_vfx_template.dcc.get_maya_main_window","title":"get_maya_main_window","text":"<pre><code>get_maya_main_window() -&gt; QtWidgets.QWidget\n</code></pre> <p>Get the Maya main window.</p> <p>Returns:</p> Type Description <code>QWidget</code> <p>PySide2.QtWidgets.QWidget: <code>TmainWindow</code> Maya main window.</p>"},{"location":"dcc/#pyside2_vfx_template.dcc.get_nuke_main_window","title":"get_nuke_main_window","text":"<pre><code>get_nuke_main_window() -&gt; QtWidgets.QMainWindow\n</code></pre> <p>Get the Nuke main window.</p> <p>Returns:</p> Type Description <code>QMainWindow</code> <p>PySide2.QtWidgets.QMainWindow: <code>DockMainWindow</code> Nuke main window.</p>"},{"location":"shadows/","title":"shadows","text":"<p>Scripts related to the QGraphicsDropShadowEffect.</p>"},{"location":"shadows/#pyside2_vfx_template.shadows.add_shadows","title":"add_shadows","text":"<pre><code>add_shadows(\n    parent: QtWidgets.QWidget,\n    shadow_object: QtWidgets.QWidget,\n    color: str = \"#000000\",\n    blur: float = 10,\n    offset: float = 0,\n) -&gt; QGraphicsDropShadowEffect\n</code></pre> <p>Apply shadows to a widget.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget</code> <p>Parent object.</p> required <code>shadow_object</code> <code>QWidget</code> <p>Object to receive shadows.</p> required <code>color</code> <code>str</code> <p>Color of the shadows. Defaults to <code>#000000</code>.</p> <code>'#000000'</code> <code>blur</code> <code>float</code> <p>Blur level of the shadows. Defaults to <code>10</code>.</p> <code>10</code> <code>offset</code> <code>float</code> <p>Offset of the shadow from the <code>shadow_object</code>. Defaults to <code>0</code>.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>QGraphicsDropShadowEffect</code> <code>QGraphicsDropShadowEffect</code> <p>The shadow object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Apply shadows to `self.top_toolbar` widget\n&gt;&gt;&gt; add_shadows(self, self.top_toolbar, \"#212121\")\n</code></pre>"},{"location":"splashscreen/","title":"splashscreen","text":"<p>VFXSplashscreen module.</p> <p>This module contains the VFXSplashScreen class, a customized QSplashScreen class. The VFXSplashScreen class provides a splash screen for your application. It allows for customization of the splash screen image, title, information text, and more. It also provides options for displaying a progress bar and applying a fade-in effect.</p> <p>Classes:</p> Name Description <code>VFXSplashScreen</code> <p>A class for creating a customized splash screen.</p>"},{"location":"splashscreen/#pyside2_vfx_template.splashscreen.VFXSplashScreen","title":"VFXSplashScreen","text":"<p>             Bases: <code>QSplashScreen</code></p> <p>Customized QSplashScreen class.</p> <p>Parameters:</p> Name Type Description Default <code>image_path</code> <code>str</code> <p>Path to the image to be displayed on the splash screen.</p> <code>None</code> <code>title</code> <code>str</code> <p>Title text to be displayed. Defaults to \"Untitled\".</p> <code>None</code> <code>information</code> <code>str</code> <p>Information text to be displayed. Defaults to a placeholder text.</p> <code>None</code> <code>show_progress_bar</code> <code>bool</code> <p>Whether to display a progress bar. Defaults to False.</p> <code>False</code> <code>project</code> <code>str</code> <p>Project name. Defaults to <code>N/A</code>.</p> <code>None</code> <code>version</code> <code>str</code> <p>Version information. Defaults to <code>v0.0.0</code>.</p> <code>None</code> <code>company</code> <code>str</code> <p>Company name. Defaults to <code>Company Ltd.</code>.</p> <code>None</code> <code>fade_in</code> <code>bool</code> <p>Whether to apply a fade-in effect on the splash screen. Defaults to False.</p> <code>False</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; app = QApplication(sys.argv)\n&gt;&gt;&gt; splash = VFXSplashScreen(\n...     image_path=\"path_to_your_image.png\",\n...     title=\"My Awesome App\",\n...     information=\"Loading...\",\n...     show_progress_bar=True,\n...     project=\"Cool Project\",\n...     version=\"v1.2.3\",\n...     company=\"My Company Ltd.\",\n...     fade_in=True,\n... )\n&gt;&gt;&gt; splash.progress(50)\n&gt;&gt;&gt; splash.show()\n&gt;&gt;&gt; splash.progress(100)\n&gt;&gt;&gt; splash.close()\n&gt;&gt;&gt; sys.exit(app.exec_())\n</code></pre>"},{"location":"style/","title":"style","text":"<p>UI stylesheet, HEX colors and others.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import style\n&gt;&gt;&gt; colors = style.load_colors_from_jsonc()\n&gt;&gt;&gt; houdini_orange = colors[\"houdini\"][\"main\"]\n#3cc0fd\n</code></pre>"},{"location":"style/#pyside2_vfx_template.style.load_colors_from_jsonc","title":"load_colors_from_jsonc","text":"<pre><code>load_colors_from_jsonc(jsonc_file: str = COLORS_FILE) -&gt; dict\n</code></pre> <p>Load colors from a JSONC (JSON with comments) file.</p> <p>Parameters:</p> Name Type Description Default <code>jsonc_file</code> <code>str</code> <p>The path to the JSONC file. Defaults to <code>COLORS_FILE</code>.</p> <code>COLORS_FILE</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing color definitions.</p>"},{"location":"style/#pyside2_vfx_template.style.load_stylesheet","title":"load_stylesheet","text":"<pre><code>load_stylesheet(light_theme: bool = False) -&gt; str\n</code></pre> <p>Load and process the stylesheet.</p> <p>This function loads a stylesheet from a <code>style.qss</code> file and applies color replacements based on the definitions in <code>style.jsonc</code> file. It also replaces certain placeholders with their corresponding values.</p> <p>Parameters:</p> Name Type Description Default <code>light_theme</code> <code>bool</code> <p>Wheter to enable the light mode or not.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The processed stylesheet content.</p>"},{"location":"style/#pyside2_vfx_template.style.replace_colors","title":"replace_colors","text":"<pre><code>replace_colors(\n    stylesheet: str,\n    colors_dict: dict = load_colors_from_jsonc(COLORS_FILE),\n    prefix=\"\",\n) -&gt; str\n</code></pre> <p>summary</p> <p>Parameters:</p> Name Type Description Default <code>stylesheet</code> <code>str</code> <p>The stylesheet to replace the colors in.</p> required <code>colors_dict</code> <code>dict</code> <p>The dict to use to search for colors to be replaced. Defaults to <code>load_colors_from_jsonc(COLORS_FILE)</code>.</p> <code>load_colors_from_jsonc(COLORS_FILE)</code> <code>prefix</code> <code>str</code> <p>The identifier prefix for colors to be replaced. Defaults to <code>\"\"</code>.</p> <code>''</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The stylesheet with replaced colors.</p>"},{"location":"tree_widget/","title":"tree_widget","text":"<p>Scripts related to the QTreeWidget.</p>"},{"location":"tree_widget/#pyside2_vfx_template.tree_widget.filter_tree","title":"filter_tree","text":"<pre><code>filter_tree(\n    filter_bar_object: QLineEdit, tree_to_filter: QTreeWidget, column: int = 0\n)\n</code></pre> <p>Filters the items of a tree by displaying or hiding them based on whether they match the filter text. Both root and child items are considered.</p> <p>Parameters:</p> Name Type Description Default <code>filter_bar_object</code> <code>QLineEdit</code> <p>The QLineEdit widget representing the filter bar.</p> required <code>tree_to_filter</code> <code>QTreeWidget</code> <p>The QTreeWidget to be filtered.</p> required <code>column</code> <code>int</code> <p>The column index to use for text filtering. Defaults to <code>0</code>.</p> <code>0</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; filter_bar = QLineEdit()\n&gt;&gt;&gt; tree_widget = QTreeWidget()\n... # Populate tree_widget with items\n&gt;&gt;&gt; filter_tree(filter_bar, tree_widget, column=1)\n... # After typing text into filter_bar, the tree_widget\n... # will be filtered.\n</code></pre>"},{"location":"utils/","title":"utils","text":"<p>Load UI files generated with Qt Designer.</p>"},{"location":"utils/#pyside2_vfx_template.utils.load_ui","title":"load_ui","text":"<pre><code>load_ui(parent: QWidget, ui_file: str) -&gt; QWidget\n</code></pre> <p>Load a UI file and return the loaded UI as a QWidget.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget</code> <p>Parent object.</p> required <code>ui_file</code> <code>str</code> <p>Path to the UI file.</p> required <p>Returns:</p> Name Type Description <code>QWidget</code> <code>QWidget</code> <p>The loaded UI.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the specified UI file doesn't exist.</p> <p>Examples:</p> <p>To load a UI file located in the same directory as the Python script</p> <pre><code>&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; ui_path = Path(__file__).with_suffix('.ui')\n&gt;&gt;&gt; loaded_ui = load_ui(self, ui_path)\n</code></pre>"},{"location":"window/","title":"window","text":"<p>This module defines the <code>VFXWindow</code> class which provides a custom window tailored for VFX-oriented DCC applications.</p> <p>The <code>VFXWindow</code> class uses PySide2 for the UI and includes various utilities and actions for a VFX workflow.</p> <p>This module also defines several constants for different types of notifications.</p> <p>Classes:</p> Name Description <code>VFXWindow</code> <p>A class for creating a customized window.</p>"},{"location":"window/#pyside2_vfx_template.window.VFXWindow","title":"VFXWindow","text":"<p>             Bases: <code>QMainWindow</code></p> <p>Customized QMainWindow class.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget</code> <p>Parent widget. Defaults to <code>None</code>.</p> <code>None</code> <code>icon</code> <code>str</code> <p>Path to the window icon image. Defaults to <code>None</code>.</p> <code>None</code> <code>title</code> <code>str</code> <p>Title of the window. Defaults to <code>None</code>.</p> <code>None</code> <code>size</code> <code>Tuple[int, int]</code> <p>Window size as width and height. Defaults to <code>None</code>.</p> <code>None</code> <code>flags</code> <code>WindowFlags</code> <p>Window flags. Defaults to <code>None</code>.</p> <code>None</code> <code>documentation</code> <code>str</code> <p>URL to the tool's documentation. Defaults to <code>None</code>.</p> <code>None</code> <code>version</code> <code>str</code> <p>Version label for the window. Defaults to <code>None</code>.</p> <code>None</code> <code>ui_file</code> <code>str</code> <p>Path to the UI file for loading. Defaults to <code>None</code>.</p> <code>None</code> <code>light_theme</code> <code>bool</code> <p>Whether to use the light theme.</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>window_icon</code> <code>QIcon</code> <p>The icon of the window.</p> <code>window_title</code> <code>str</code> <p>The title of the window.</p> <code>window_size</code> <code>QSize</code> <p>The size of the window.</p> <code>window_flags</code> <code>WindowFlags</code> <p>The window flags.</p> <code>documentation</code> <code>str</code> <p>The documentation string.</p> <code>project</code> <code>str</code> <p>The project name.</p> <code>version</code> <code>str</code> <p>The version string.</p> <code>company</code> <code>str</code> <p>The company name.</p> <code>ui_file</code> <code>str</code> <p>The UI file path.</p> <code>light_theme</code> <code>bool</code> <p>A flag indicating whether the light theme is currently active.</p> <code>CRITICAL</code> <code>int</code> <p>Constant for critical log level.</p> <code>ERROR</code> <code>int</code> <p>Constant for error log level.</p> <code>WARNING</code> <code>int</code> <p>Constant for warning log level.</p> <code>SUCCESS</code> <code>int</code> <p>Constant for success log level.</p> <code>INFO</code> <code>int</code> <p>Constant for info log level.</p> <code>about_action</code> <code>QAction</code> <p>Action for the \"About\" menu item.</p> <code>hide_action</code> <code>QAction</code> <p>Action for the \"Hide\" menu item.</p> <code>hide_others_action</code> <code>QAction</code> <p>Action for the \"Hide Others\" menu item.</p> <code>close_action</code> <code>QAction</code> <p>Action for the \"Close\" menu item.</p> <code>check_updates_action</code> <code>QAction</code> <p>Action for the \"Check for Updates...\" menu item.</p> <code>settings_action</code> <code>QAction</code> <p>Action for the \"Settings\" menu item.</p> <code>switch_theme_action</code> <code>QAction</code> <p>Action for the \"Switch Theme\" menu item.</p> <code>window_on_top_action</code> <code>QAction</code> <p>Action for the \"Always On Top\" menu item.</p> <code>minimize_window_action</code> <code>QAction</code> <p>Action for the \"Minimize\" menu item.</p> <code>maximize_window_action</code> <code>QAction</code> <p>Action for the \"Maximize\" menu item.</p> <code>open_documentation_action</code> <code>QAction</code> <p>Action for the \"Documentation\" menu item.</p> <code>previous_action</code> <code>QAction</code> <p>Action for the \"Previous\" toolbar item.</p> <code>next_action</code> <code>QAction</code> <p>Action for the \"Next\" toolbar item.</p> <code>refresh_action</code> <code>QAction</code> <p>Action for the \"Refresh\" toolbar item.</p> <code>home_action</code> <code>QAction</code> <p>Action for the \"Home\" toolbar item.</p> <code>menu_bar</code> <code>QMenuBar</code> <p>The menu bar of the window.</p> <code>icon_menu</code> <code>QMenu</code> <p>The icon menu of the menu bar.</p> <code>main_menu</code> <code>QMenu</code> <p>The main menu of the menu bar.</p> <code>about_menu</code> <code>QAction</code> <p>The \"About\" menu item in the main menu.</p> <code>check_updates_menu</code> <code>QAction</code> <p>The \"Check for Updates...\" menu item in the main menu.</p> <code>close_menu</code> <code>QAction</code> <p>The \"Close\" menu item in the main menu.</p> <code>hide_main_menu</code> <code>QAction</code> <p>The \"Hide\" menu item in the main menu.</p> <code>hide_others_menu</code> <code>QAction</code> <p>The \"Hide Others\" menu item in the main menu.</p> <code>edit_menu</code> <code>QMenu</code> <p>The edit menu of the menu bar.</p> <code>settings_menu</code> <code>QAction</code> <p>The \"Settings\" menu item in the edit menu.</p> <code>window_menu</code> <code>QMenu</code> <p>The window menu of the menu bar.</p> <code>switch_theme_menu</code> <code>QAction</code> <p>The \"Switch Theme\" menu item in the window menu.</p> <code>minimize_menu</code> <code>QAction</code> <p>The \"Minimize\" menu item in the window menu.</p> <code>maximize_menu</code> <code>QAction</code> <p>The \"Maximize\" menu item in the window menu.</p> <code>on_top_menu</code> <code>QAction</code> <p>The \"Always On Top\" menu item in the window menu.</p> <code>help_menu</code> <code>QMenu</code> <p>The help menu of the menu bar.</p> <code>open_documentation_menu</code> <code>QAction</code> <p>The \"Documentation\" menu item in the help menu.</p> <code>toolbar</code> <code>QToolBar</code> <p>The toolbar of the window.</p> <code>previous_toolbar</code> <code>QAction</code> <p>The \"Previous\" toolbar item.</p> <code>next_toolbar</code> <code>QAction</code> <p>The \"Next\" toolbar item.</p> <code>refresh_toolbar</code> <code>QAction</code> <p>The \"Refresh\" toolbar item.</p> <code>home_toolbar</code> <code>QAction</code> <p>The \"Home\" toolbar item.</p> <code>about_dialog</code> <code>QDialog</code> <p>The \"About\" dialog.</p> <code>status_bar</code> <code>QStatusBar</code> <p>The status bar of the window.</p> <code>project_label</code> <code>QLabel</code> <p>The project label in the status bar.</p> <code>version_label</code> <code>QLabel</code> <p>The version label in the status bar.</p> <code>company_label</code> <code>QLabel</code> <p>The company label in the status bar.</p> <p>Examples:</p> <p>Outside a DCC</p> <pre><code>&gt;&gt;&gt; app = QApplication(sys.argv)\n&gt;&gt;&gt; _window = VFXWindow(\n...     icon=\"path/to/icon.png\",\n...     title=\"My Custom Window\",\n...     size=(800, 600),\n...     documentation=\"https://my_tool_docs.com\",\n...     project=\"Awesome Project\",\n...     version=\"v1.0.0\",\n...     ui_file=\"path/to/ui_file.ui\",\n...     light_theme=False,\n... )\n&gt;&gt;&gt; _window.show()\n&gt;&gt;&gt; _window.set_statusbar_message(\"Window initialized\", window.INFO)\n&gt;&gt;&gt; sys.exit(app.exec_())\n</code></pre> <p>Inside a DCC (Houdini)</p> <pre><code>&gt;&gt;&gt; houdini_window = dcc.get_houdini_main_window()\n&gt;&gt;&gt; houdini_style = dcc.get_houdini_stylesheet()\n&gt;&gt;&gt; _window = window.VFXWindow(\n...    parent=houdini_win,\n...    ui_file=_ui_file,\n...    light_theme=False\n...   )\n&gt;&gt;&gt; _window.show()\n&gt;&gt;&gt; _window.set_statusbar_message(\"Window initialized\", window.INFO)\n</code></pre> <p>Hide toolbar and menu bar</p> <pre><code>&gt;&gt;&gt; houdini_window = dcc.get_houdini_main_window()\n&gt;&gt;&gt; houdini_style = dcc.get_houdini_stylesheet()\n&gt;&gt;&gt; _window = window.VFXWindow(\n...    parent=houdini_win,\n...    ui_file=_ui_file,\n...    light_theme=False\n...   )\n&gt;&gt;&gt; _window.show()\n&gt;&gt;&gt; _window.hide_toolbar()\n&gt;&gt;&gt; _window.hide_menu_bar()\n</code></pre>"},{"location":"window/#pyside2_vfx_template.window.VFXWindow.clear_statusbar_message","title":"clear_statusbar_message","text":"<pre><code>clear_statusbar_message() -&gt; None\n</code></pre> <p>Clear the status bar message.</p>"},{"location":"window/#pyside2_vfx_template.window.VFXWindow.hide_menu_bar","title":"hide_menu_bar","text":"<pre><code>hide_menu_bar() -&gt; None\n</code></pre> <p>Hide the menu bar.</p>"},{"location":"window/#pyside2_vfx_template.window.VFXWindow.hide_statusbar","title":"hide_statusbar","text":"<pre><code>hide_statusbar() -&gt; None\n</code></pre> <p>Hide the status bar.</p>"},{"location":"window/#pyside2_vfx_template.window.VFXWindow.hide_toolbar","title":"hide_toolbar","text":"<pre><code>hide_toolbar() -&gt; None\n</code></pre> <p>Hide the toolbar.</p>"},{"location":"window/#pyside2_vfx_template.window.VFXWindow.set_statusbar_message","title":"set_statusbar_message","text":"<pre><code>set_statusbar_message(\n    message: str,\n    severity_type: int = 4,\n    duration: float = 2.5,\n    time: bool = True,\n    logger: logging.Logger = None,\n) -&gt; None\n</code></pre> <p>Display a message in the status bar with a specified severity.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to be displayed.</p> required <code>severity_type</code> <code>int</code> <p>The severity level of the message. Should be one of <code>CRITICAL</code>, <code>ERROR</code>, <code>WARNING</code>, <code>SUCCESS</code>, or <code>INFO</code>. Defaults to <code>INFO</code>.</p> <code>4</code> <code>duration</code> <code>float</code> <p>The duration in seconds for which the message should be displayed. Defaults to<code>2.5</code>.</p> <code>2.5</code> <code>time</code> <code>bool</code> <p>Whether to display the current time before the message. Defaults to <code>True</code>.</p> <code>True</code> <code>logger</code> <code>Logger</code> <p>A logger object to log the message. Defaults to <code>None</code>.</p> <code>None</code> <p>Examples:</p> <p>To display a critical error message with a red background</p> <pre><code>&gt;&gt;&gt; self.set_statusbar_message(\n...     \"Critical error occurred!\",\n...     severity_type=self.CRITICAL,\n...     duration=5,\n...     logger=my_logger,\n... )\n</code></pre> Note <p>You can either use the window instance to retrieve the verbosity constants, or the window module.</p>"},{"location":"window/#pyside2_vfx_template.window.VFXWindow.show_menu_bar","title":"show_menu_bar","text":"<pre><code>show_menu_bar() -&gt; None\n</code></pre> <p>Show the menu bar.</p>"},{"location":"window/#pyside2_vfx_template.window.VFXWindow.show_statusbar","title":"show_statusbar","text":"<pre><code>show_statusbar() -&gt; None\n</code></pre> <p>Show the status bar.</p>"},{"location":"window/#pyside2_vfx_template.window.VFXWindow.show_toolbar","title":"show_toolbar","text":"<pre><code>show_toolbar() -&gt; None\n</code></pre> <p>Show the toolbar.</p>"}]}