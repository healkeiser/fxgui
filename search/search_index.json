{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-fxgui","title":"What is FXGui","text":"<p>Custom Python classes and utilities tailored for Qt built UI, in VFX-oriented DCC applications.</p> <p>Note</p> <p>This documentation is updated regularly to reflect the most recent changes. If you spot any issue or have a feature request, don't hesitate to send me an email.</p>"},{"location":"examples/","title":"examples","text":"<p>Examples on how to use the <code>fxgui</code> module.</p>"},{"location":"examples/#fxgui.examples.main","title":"main","text":"<pre><code>main(show_delayed: bool = False)\n</code></pre> <p>Main example function.</p> <p>Parameters:</p> Name Type Description Default <code>show_delayed</code> <code>bool</code> <p>Whether to show the window after 3 seconds or not.</p> <code>False</code> Source code in <code>fxgui\\examples.py</code> <pre><code>def main(show_delayed: bool = False):\n    \"\"\"Main example function.\n\n    Args:\n        show_delayed (bool): Whether to show the window after 3 seconds or not.\n    \"\"\"\n\n    # Initialize the QApplication\n    application = fxwidgets.VFXApplication()\n\n    # Initialize window for splashscreen\n    window = fxwidgets.VFXWindow(ui_file=_ui_file, parent_package=fxdcc.STANDALONE)\n    application.processEvents()\n\n    # Splashscreen\n    splashscreen = fxwidgets.VFXSplashScreen(image_path=_pixmap, fade_in=False, show_progress_bar=True)\n    application.processEvents()\n\n    splashscreen.show()\n    application.processEvents()\n\n    # Loading process\n    for i in range(101):\n        splashscreen.progress_bar.setValue(i)\n        QTimer.singleShot(i, application.processEvents)\n\n    if show_delayed:\n        # Delay the call to splash.finish by 5 seconds\n        QTimer.singleShot(3 * 1000, lambda: splashscreen.finish(window))\n        application.processEvents()\n    else:\n        # Link the window loading to the splashcreen visibility\n        splashscreen.finish(window)\n        application.processEvents()\n\n    # Window\n    if show_delayed:\n        # Delay the call to _window.show by 3 seconds\n        QTimer.singleShot(3 * 1000 + 200, window.show)\n    else:\n        window.show()\n\n    window.set_statusbar_message(\"Window initialized\", fxwidgets.INFO)\n    window.hide_toolbar()\n\n    application.processEvents()\n\n    # Buttons in `test.ui` example\n    window.ui.button_success.clicked.connect(lambda: window.set_statusbar_message(\"Success message\", fxwidgets.SUCCESS))\n    window.ui.button_info.clicked.connect(lambda: window.set_statusbar_message(\"Info message\", fxwidgets.INFO))\n    window.ui.button_warning.clicked.connect(lambda: window.set_statusbar_message(\"Success message\", fxwidgets.WARNING))\n    window.ui.button_error.clicked.connect(lambda: window.set_statusbar_message(\"Error message\", fxwidgets.ERROR))\n    window.ui.button_critical.clicked.connect(\n        lambda: window.set_statusbar_message(\"Critical message\", fxwidgets.CRITICAL)\n    )\n\n    # Refresh toolbar button\n    def refresh():\n        # Store original icon\n        original_icon = window.refresh_action.icon()\n\n        # Display statusbar message and change icon\n        window.set_statusbar_message(\"Refreshing...\", fxwidgets.INFO)\n        ok_pixmap = QStyle.StandardPixmap.SP_DialogOkButton\n        ok_icon = window.style().standardIcon(ok_pixmap)\n        window.refresh_action.setIcon(ok_icon)\n\n        # Restore original icon after 2 seconds\n        def restore_icon():\n            window.refresh_action.setIcon(original_icon)\n            window.refresh_action.setEnabled(True)\n\n        QTimer.singleShot(2000, restore_icon)\n\n    window.refresh_action.triggered.connect(refresh)\n\n    application.exec_()\n</code></pre>"},{"location":"examples/#fxgui.examples.show_floating_dialog_houdini","title":"show_floating_dialog_houdini","text":"<pre><code>show_floating_dialog_houdini()\n</code></pre> <p>An example VFXFloatingDialog launched from inside Houdini.</p> Source code in <code>fxgui\\examples.py</code> <pre><code>def show_floating_dialog_houdini():\n    \"\"\"An example VFXFloatingDialog launched from inside Houdini.\"\"\"\n\n    import hou\n\n    houdini_window = fxdcc.get_dcc_main_window()\n    floating_dialog = fxwidgets.VFXFloatingDialog(parent=houdini_window)\n\n    # Set icon\n    icon = hou.qt.Icon(\"MISC_python\")\n    pixmap = fxutils.convert_qicon_to_qpixmap(icon, QSize(10, 100))\n    floating_dialog.set_dialog_icon(pixmap)\n\n    # Add button to the `button_box`\n    floating_dialog.button_box.addButton(\"Test\", QDialogButtonBox.ActionRole)\n\n    # Add combo box\n    combo_box = QComboBox(floating_dialog)\n    combo_box.addItems([\"Item 1\", \"Item 2\", \"Item 3\"])\n    floating_dialog.main_layout.addWidget(combo_box)\n\n    # Show under the cursor\n    floating_dialog.show_under_cursor()\n</code></pre>"},{"location":"examples/#fxgui.examples.show_splashscreen","title":"show_splashscreen","text":"<pre><code>show_splashscreen(time: float = 5.0)\n</code></pre> <p>Show the splashscreen.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>float</code> <p>The time in seconds to show the splashscreen.</p> <code>5.0</code> Source code in <code>fxgui\\examples.py</code> <pre><code>def show_splashscreen(time: float = 5.0):\n    \"\"\"Show the splashscreen.\n\n    Args:\n        time (float): The time in seconds to show the splashscreen.\n    \"\"\"\n\n    application = fxwidgets.VFXApplication()\n    splashscreen = fxwidgets.VFXSplashScreen(image_path=_pixmap, show_progress_bar=True, fade_in=False)\n    splashscreen.show()\n    splashscreen.progress_bar.setValue(75)\n    QTimer.singleShot(time * 1000, splashscreen.close)\n    QTimer.singleShot(time * 1000, application.quit)\n    application.exec_()\n</code></pre>"},{"location":"examples/#fxgui.examples.show_window","title":"show_window","text":"<pre><code>show_window()\n</code></pre> <p>Show the window.</p> Source code in <code>fxgui\\examples.py</code> <pre><code>def show_window():\n    \"\"\"Show the window.\"\"\"\n\n    application = fxwidgets.VFXApplication()\n    window = fxwidgets.VFXWindow(ui_file=_ui_file)\n    window.show()\n    application.exec_()\n</code></pre>"},{"location":"examples/#fxgui.examples.show_window_houdini","title":"show_window_houdini","text":"<pre><code>show_window_houdini()\n</code></pre> <p>An example VFXWindow instance launched from inside Houdini.</p> Source code in <code>fxgui\\examples.py</code> <pre><code>def show_window_houdini():\n    \"\"\"An example VFXWindow instance launched from inside Houdini.\"\"\"\n\n    houdini_window = fxdcc.get_dcc_main_window()\n    window = fxwidgets.VFXWindow(parent=houdini_window, ui_file=_ui_file, parent_package=fxdcc.HOUDINI)\n    window.show()\n</code></pre>"},{"location":"fxdcc/","title":"fxdcc","text":"<p>Utility functions for retrieving main windows of DCC applications.</p>"},{"location":"fxdcc/#fxgui.fxdcc.get_dcc_main_window","title":"get_dcc_main_window","text":"<pre><code>get_dcc_main_window() -&gt; Optional[Any]\n</code></pre> <p>Import the current DCC main window.</p> <p>Returns:</p> Type Description <code>Optional[Any]</code> <p>Optional[Any]: The return value of the first successful function call, or <code>None</code> if no calls are successful.</p> Notes <p>This function is DCC agnostic and will return the main window based on the success of the DCC module import.</p>"},{"location":"fxdcc/#fxgui.fxdcc.get_houdini_main_window","title":"get_houdini_main_window","text":"<pre><code>get_houdini_main_window() -&gt; QWidget\n</code></pre> <p>Get the Houdini main window.</p> <p>Returns:</p> Type Description <code>QWidget</code> <p>qtpy.QtWidgets.QWidget: <code>QWidget</code> Houdini main window.</p>"},{"location":"fxdcc/#fxgui.fxdcc.get_houdini_stylesheet","title":"get_houdini_stylesheet","text":"<pre><code>get_houdini_stylesheet() -&gt; str\n</code></pre> <p>Get the Houdini stylesheet.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The Houdini stylesheet.</p>"},{"location":"fxdcc/#fxgui.fxdcc.get_maya_main_window","title":"get_maya_main_window","text":"<pre><code>get_maya_main_window() -&gt; QWidget\n</code></pre> <p>Get the Maya main window.</p> <p>Returns:</p> Type Description <code>QWidget</code> <p>qtpy.QtWidgets.QWidget: <code>TmainWindow</code> Maya main window.</p>"},{"location":"fxdcc/#fxgui.fxdcc.get_nuke_main_window","title":"get_nuke_main_window","text":"<pre><code>get_nuke_main_window() -&gt; QMainWindow\n</code></pre> <p>Get the Nuke main window.</p> <p>Returns:</p> Type Description <code>QMainWindow</code> <p>qtpy.QtWidgets.QMainWindow: <code>DockMainWindow</code> Nuke main window.</p>"},{"location":"fxicons/","title":"fxicons","text":"<p>This module provides functionality for handling icons in a VFX application.</p>"},{"location":"fxicons/#fxgui.fxicons.change_pixmap_color","title":"change_pixmap_color  <code>cached</code>","text":"<pre><code>change_pixmap_color(pixmap: QPixmap, color: str) -&gt; QPixmap\n</code></pre> <p>Change the color of a pixmap.</p> <p>Parameters:</p> Name Type Description Default <code>pixmap</code> <code>QPixmap</code> <p>The pixmap to change the color of.</p> required <code>color</code> <code>str</code> <p>The color to apply.</p> required <p>Returns:</p> Name Type Description <code>QPixmap</code> <code>QPixmap</code> <p>The pixmap with the new color applied.</p>"},{"location":"fxicons/#fxgui.fxicons.get_icon","title":"get_icon  <code>cached</code>","text":"<pre><code>get_icon(\n    icon_name: str,\n    width: int = 48,\n    height: int = 48,\n    color: Optional[str] = None,\n    library: Optional[str] = None,\n    style: Optional[str] = None,\n    extension: Optional[str] = None,\n) -&gt; QIcon\n</code></pre> <p>Get a QIcon of the specified icon.</p> <p>Parameters:</p> Name Type Description Default <code>icon_name</code> <code>str</code> <p>The name of the icon.</p> required <code>width</code> <code>int</code> <p>The width of the pixmap. Defaults to 48.</p> <code>48</code> <code>height</code> <code>int</code> <p>The height of the pixmap. Defaults to 48.</p> <code>48</code> <code>color</code> <code>str</code> <p>The color to convert the pixmap to. Defaults to <code>None</code>.</p> <code>None</code> <code>library</code> <code>str</code> <p>The library of the icon. Defaults to <code>None</code>.</p> <code>None</code> <code>style</code> <code>str</code> <p>The style of the icon. Defaults to <code>None</code>.</p> <code>None</code> <code>extension</code> <code>str</code> <p>The extension of the icon. Defaults to <code>None</code>.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>QIcon</code> <code>QIcon</code> <p>The QIcon of the icon.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_icon(\"add\", color=\"red\")\n</code></pre>"},{"location":"fxicons/#fxgui.fxicons.get_icon_path","title":"get_icon_path  <code>cached</code>","text":"<pre><code>get_icon_path(\n    icon_name: str,\n    library: Optional[str] = None,\n    style: Optional[str] = None,\n    extension: Optional[str] = None,\n    verify: bool = True,\n) -&gt; str\n</code></pre> <p>Get the path of the specified icon.</p> <p>Parameters:</p> Name Type Description Default <code>icon_name</code> <code>str</code> <p>The name of the icon.</p> required <code>library</code> <code>str</code> <p>The library of the icon. Defaults to <code>None</code>.</p> <code>None</code> <code>style</code> <code>str</code> <p>The style of the icon. Defaults to <code>None</code>.</p> <code>None</code> <code>extension</code> <code>str</code> <p>The extension of the icon. Defaults to <code>None</code>.</p> <code>None</code> <code>verify</code> <code>bool</code> <p>Whether to verify if the icon exists. Defaults to <code>True</code>.</p> <code>True</code> <p>Raises:</p> Type Description <code>OSError</code> <p>If verify is <code>True</code> and the icon does not exist.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The path of the icon.</p>"},{"location":"fxicons/#fxgui.fxicons.get_pixmap","title":"get_pixmap  <code>cached</code>","text":"<pre><code>get_pixmap(\n    icon_name: str,\n    width: int = 48,\n    height: int = 48,\n    color: Optional[str] = None,\n    library: Optional[str] = None,\n    style: Optional[str] = None,\n    extension: Optional[str] = None,\n) -&gt; QPixmap\n</code></pre> <p>Get a QPixmap of the specified icon.</p> <p>Parameters:</p> Name Type Description Default <code>icon_name</code> <code>str</code> <p>The name of the icon.</p> required <code>width</code> <code>int</code> <p>The width of the pixmap. Defaults to 48.</p> <code>48</code> <code>height</code> <code>int</code> <p>The height of the pixmap. Defaults to 48.</p> <code>48</code> <code>color</code> <code>str</code> <p>The color to convert the pixmap to. Defaults to <code>None</code>.</p> <code>None</code> <code>library</code> <code>str</code> <p>The library of the icon. Defaults to <code>None</code>.</p> <code>None</code> <code>style</code> <code>str</code> <p>The style of the icon. Defaults to <code>None</code>.</p> <code>None</code> <code>extension</code> <code>str</code> <p>The extension of the icon. Defaults to <code>None</code>.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>QPixmap</code> <code>QPixmap</code> <p>The QPixmap of the icon.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_pixmap(\"add\", color=\"red\")\n</code></pre>"},{"location":"fxicons/#fxgui.fxicons.has_transparency","title":"has_transparency","text":"<pre><code>has_transparency(mask: QBitmap) -&gt; bool\n</code></pre> <p>Check if a mask has any transparency.</p> <p>Parameters:</p> Name Type Description Default <code>mask</code> <code>QBitmap</code> <p>The mask to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p><code>True</code> if the mask has transparency, <code>False</code> otherwise.</p>"},{"location":"fxstyle/","title":"fxstyle","text":"<p>UI stylesheet, HEX colors and others.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import style\n&gt;&gt;&gt; colors = style.load_colors_from_jsonc()\n&gt;&gt;&gt; houdini_orange = colors[\"houdini\"][\"main\"]\n#3cc0fd\n</code></pre>"},{"location":"fxstyle/#fxgui.fxstyle.VFXProxyStyle","title":"VFXProxyStyle","text":"<p>             Bases: <code>QProxyStyle</code></p> <p>A custom style class that extends QProxyStyle to provide custom icons.</p>"},{"location":"fxstyle/#fxgui.fxstyle.VFXProxyStyle.set_icon_color","title":"set_icon_color","text":"<pre><code>set_icon_color(color: str)\n</code></pre> <p>Sets the color of the icons.</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>str</code> <p>The color to set the icons to.</p> required"},{"location":"fxstyle/#fxgui.fxstyle.VFXProxyStyle.standardIcon","title":"standardIcon","text":"<pre><code>standardIcon(\n    standardIcon: StandardPixmap,\n    option: Optional[QStyleOption] = None,\n    widget: Optional[QWidget] = None,\n) -&gt; QIcon\n</code></pre> <p>Returns an icon for the given standardIcon.</p> <p>Parameters:</p> Name Type Description Default <code>standardIcon</code> <code>StandardPixmap</code> <p>The standard pixmap for which an icon should be returned.</p> required <code>option</code> <code>QStyleOption</code> <p>An option that can be used to fine-tune the look of the icon. Defaults to <code>None</code>.</p> <code>None</code> <code>widget</code> <code>QWidget</code> <p>The widget for which the icon is being requested. Defaults to <code>None</code>.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>QIcon</code> <code>QIcon</code> <p>The icon for the standardIcon. If no custom icon is found, the default icon is returned.</p>"},{"location":"fxstyle/#fxgui.fxstyle.get_current_palette","title":"get_current_palette","text":"<pre><code>get_current_palette(object: QObject) -&gt; None\n</code></pre> <p>Prints the current palette of the given Qt object.</p> <p>This function retrieves the current palette of the given Qt object and prints each color role in each state group in the format <code>QPalette.State, QPalette.Role, QColor(r, g, b)</code>.</p> <p>Parameters:</p> Name Type Description Default <code>object</code> <code>QObject</code> <p>The Qt object whose palette is to be retrieved.</p> required"},{"location":"fxstyle/#fxgui.fxstyle.load_colors_from_jsonc","title":"load_colors_from_jsonc","text":"<pre><code>load_colors_from_jsonc(jsonc_file: str = COLOR_FILE) -&gt; dict\n</code></pre> <p>Load colors from a JSONC (JSON with comments) file.</p> <p>Parameters:</p> Name Type Description Default <code>jsonc_file</code> <code>str</code> <p>The path to the JSONC file. Defaults to <code>COLOR_FILE</code>.</p> <code>COLOR_FILE</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing color definitions.</p>"},{"location":"fxstyle/#fxgui.fxstyle.load_houdini_stylesheet","title":"load_houdini_stylesheet","text":"<pre><code>load_houdini_stylesheet(style_file: str = None)\n</code></pre> <p>Load the stylesheet and replace some part of the given QSS file to make them work in Houdini.</p> <p>Parameters:</p> Name Type Description Default <code>style_file</code> <code>str</code> <p>The path to the QSS file. Defaults to <code>HOUDINI_STYLE_FILE</code>.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The stylesheet with the right elements replaced.</p>"},{"location":"fxstyle/#fxgui.fxstyle.replace_colors","title":"replace_colors","text":"<pre><code>replace_colors(\n    stylesheet: str,\n    colors_dict: dict = load_colors_from_jsonc(COLOR_FILE),\n    prefix=\"\",\n) -&gt; str\n</code></pre> <p>summary</p> <p>Parameters:</p> Name Type Description Default <code>stylesheet</code> <code>str</code> <p>The stylesheet to replace the colors in.</p> required <code>colors_dict</code> <code>dict</code> <p>The dict to use to search for colors to be replaced. Defaults to <code>load_colors_from_jsonc(COLOR_FILE)</code>.</p> <code>load_colors_from_jsonc(COLOR_FILE)</code> <code>prefix</code> <code>str</code> <p>The identifier prefix for colors to be replaced. Defaults to <code>\"\"</code>.</p> <code>''</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The stylesheet with replaced colors.</p>"},{"location":"fxstyle/#fxgui.fxstyle.set_dark_palette","title":"set_dark_palette","text":"<pre><code>set_dark_palette(object: QObject) -&gt; QPalette\n</code></pre> <p>Set the object palette to a dark theme.</p> <p>Parameters:</p> Name Type Description Default <code>application</code> <code>QObject</code> <p>The QObject (QApplication, QWindow, etc.) to set the palette on.</p> required <p>Returns:</p> Name Type Description <code>QPalette</code> <code>QPalette</code> <p>The custom palette.</p>"},{"location":"fxstyle/#fxgui.fxstyle.set_light_palette","title":"set_light_palette","text":"<pre><code>set_light_palette(object: QObject) -&gt; QPalette\n</code></pre> <p>Set the object palette to a light theme.</p> <p>Parameters:</p> Name Type Description Default <code>application</code> <code>QObject</code> <p>The QObject (QApplication, QWindow, etc.) to set the palette on.</p> required <p>Returns:</p> Name Type Description <code>QPalette</code> <code>QPalette</code> <p>The custom palette.</p>"},{"location":"fxstyle/#fxgui.fxstyle.set_style","title":"set_style","text":"<pre><code>set_style(widget: QWidget, style: str = 'Fusion') -&gt; VFXProxyStyle\n</code></pre> <p>Set the style.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>QWidget</code> <p>The QWidget subclass to set the style to.</p> required <code>style</code> <code>str</code> <p>The style to set. Defaults to \"Fusion\".</p> <code>'Fusion'</code> <p>Returns:</p> Name Type Description <code>VFXProxyStyle</code> <code>VFXProxyStyle</code> <p>The custom style.</p>"},{"location":"fxutils/","title":"fxutils","text":"<p>Utils related to QT objects.</p>"},{"location":"fxutils/#fxgui.fxutils.add_shadows","title":"add_shadows","text":"<pre><code>add_shadows(\n    parent: QWidget,\n    shadow_object: QWidget,\n    color: str = \"#000000\",\n    blur: float = 10,\n    offset: float = 0,\n) -&gt; QGraphicsDropShadowEffect\n</code></pre> <p>Apply shadows to a widget.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget</code> <p>Parent object.</p> required <code>shadow_object</code> <code>QWidget</code> <p>Object to receive shadows.</p> required <code>color</code> <code>str</code> <p>Color of the shadows. Defaults to <code>#000000</code>.</p> <code>'#000000'</code> <code>blur</code> <code>float</code> <p>Blur level of the shadows. Defaults to <code>10</code>.</p> <code>10</code> <code>offset</code> <code>float</code> <p>Offset of the shadow from the <code>shadow_object</code>. Defaults to <code>0</code>.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>QGraphicsDropShadowEffect</code> <code>QGraphicsDropShadowEffect</code> <p>The shadow object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Apply shadows to `self.top_toolbar` widget\n&gt;&gt;&gt; add_shadows(self, self.top_toolbar, \"#212121\")\n</code></pre>"},{"location":"fxutils/#fxgui.fxutils.convert_qicon_to_qpixmap","title":"convert_qicon_to_qpixmap","text":"<pre><code>convert_qicon_to_qpixmap(\n    icon: QIcon, desired_size: Optional[QSize] = None\n) -&gt; Optional[QPixmap]\n</code></pre> <p>Converts a QIcon to a QPixmap.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>QIcon</code> <p>The QIcon to convert.</p> required <code>desired_size</code> <code>Optional[QSize]</code> <p>The desired size for the pixmap (QSize). If <code>None</code>, the \"best\" available size will be used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>QPixmap</code> <code>Optional[QPixmap]</code> <p>A QPixmap or <code>None</code> if no suitable pixmap is available.</p> <p>Examples:</p> <p>Let the size be decided</p> <pre><code>&gt;&gt;&gt; icon = hou.qt.Icon(\"MISC_python\")\n&gt;&gt;&gt; pixmap = convert_qicon_to_qpixmap(icon)\n</code></pre> <p>Choose a size</p> <pre><code>&gt;&gt;&gt; icon = hou.qt.Icon(\"MISC_python\")\n&gt;&gt;&gt; pixmap = convert_qicon_to_qpixmap(icon, QSize(48, 48))\n</code></pre>"},{"location":"fxutils/#fxgui.fxutils.create_action","title":"create_action","text":"<pre><code>create_action(\n    parent: QWidget,\n    name: str,\n    icon: str,\n    trigger: Callable,\n    enable: bool = True,\n    visible: bool = True,\n    shortcut: str = None,\n) -&gt; Optional[QAction]\n</code></pre> <p>Creates a QACtion.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget</code> <p>Parent object.</p> required <code>name</code> <code>str</code> <p>Name to display.</p> required <code>icon</code> <code>str</code> <p>Icon path.</p> required <code>trigger</code> <code>Callable</code> <p>Function to trigger when clicked.</p> required <code>enable</code> <code>bool</code> <p>Enable/disable. Defaults to <code>True</code>.</p> <code>True</code> <code>visible</code> <code>bool</code> <p>Show/hide. Defaults to <code>True</code>.</p> <code>True</code> <code>shortcut</code> <code>str</code> <p>If not <code>None</code>, key sequence (hotkeys) to use. Defaults to <code>None</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[QAction]</code> <p>Optional[QAction]:</p>"},{"location":"fxutils/#fxgui.fxutils.filter_tree","title":"filter_tree","text":"<pre><code>filter_tree(\n    filter_bar_object: QLineEdit, tree_to_filter: QTreeWidget, column: int = 0\n) -&gt; None\n</code></pre> <p>Filters the items of a tree by displaying or hiding them based on whether they match the filter text. Both root and child items are considered.</p> <p>Parameters:</p> Name Type Description Default <code>filter_bar_object</code> <code>QLineEdit</code> <p>The QLineEdit widget representing the filter bar.</p> required <code>tree_to_filter</code> <code>QTreeWidget</code> <p>The QTreeWidget to be filtered.</p> required <code>column</code> <code>int</code> <p>The column index to use for text filtering. Defaults to <code>0</code>.</p> <code>0</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; filter_bar = QLineEdit()\n&gt;&gt;&gt; tree_widget = QTreeWidget()\n&gt;&gt;&gt; filter_tree(filter_bar, tree_widget, column=1)\n</code></pre>"},{"location":"fxutils/#fxgui.fxutils.load_ui","title":"load_ui","text":"<pre><code>load_ui(parent: QWidget, ui_file: str) -&gt; QWidget\n</code></pre> <p>Load a UI file and return the loaded UI as a QWidget.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget</code> <p>Parent object.</p> required <code>ui_file</code> <code>str</code> <p>Path to the UI file.</p> required <p>Returns:</p> Name Type Description <code>QWidget</code> <code>QWidget</code> <p>The loaded UI.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the specified UI file doesn't exist.</p> <p>Examples:</p> <p>To load a UI file located in the same directory as the Python script</p> <pre><code>&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; ui_path = Path(__file__).with_suffix('.ui')\n&gt;&gt;&gt; loaded_ui = load_ui(self, ui_path)\n</code></pre>"},{"location":"fxwidgets/","title":"fxwidgets","text":"<p>Scripts related to the QtWidgets module.</p>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXApplication","title":"VFXApplication","text":"<p>             Bases: <code>QApplication</code></p> <p>Customized QApplication class.</p>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXFloatingDialog","title":"VFXFloatingDialog","text":"<p>             Bases: <code>QDialog</code></p>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXFloatingDialog.__init__","title":"__init__","text":"<pre><code>__init__(\n    parent: Optional[QWidget] = None,\n    icon: Optional[QPixmap] = None,\n    title: Optional[str] = None,\n    parent_package: Optional[int] = None,\n)\n</code></pre> <p>A floating dialog that appears at the cursor's position. It closes when any mouse button except the right one is pressed.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QtWidget</code> <p>Parent widget. Defaults to <code>hou.qt.mainWindow()</code>.</p> <code>None</code> <code>icon</code> <code>QPixmap</code> <p>The QPixmap icon.</p> <code>None</code> <code>title</code> <code>str</code> <p>The dialog title.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>dialog_icon</code> <code>Qicon</code> <p>summary.</p> <code>drop_position</code> <code>tuple</code> <p>summary.</p> <code>title_widget</code> <code>QWidget</code> <p>summary.</p> <code>title_label</code> <code>QLabel</code> <p>summary.</p> <code>title_layout</code> <code>QLayout</code> <p>summary.</p> <code>main_widget</code> <code>Qwidget</code> <p>summary.</p> <code>main_layout</code> <code>QLayout</code> <p>summary.</p> <code>layout</code> <code>QLayout</code> <p>summary.</p> <code>button_box</code> <code>QDialogButtonBox</code> <p>summary.</p>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXFloatingDialog.closeEvent","title":"closeEvent","text":"<pre><code>closeEvent(event: QCloseEvent) -&gt; None\n</code></pre> <p>Removes the parent of the dialog and closes it.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>QCloseEvent</code> <p>The close event.</p> required"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXFloatingDialog.mousePressEvent","title":"mousePressEvent","text":"<pre><code>mousePressEvent(event: QMouseEvent) -&gt; None\n</code></pre> <p>Closes the dialog when any mouse button except the right one is pressed.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>QMouseEvent</code> <p>The mouse press event.</p> required"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXFloatingDialog.set_dialog_icon","title":"set_dialog_icon","text":"<pre><code>set_dialog_icon(icon: Optional[QPixmap] = None) -&gt; None\n</code></pre> <p>Sets the dialog's icon.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>QPixmap</code> <p>The QPixmap icon.</p> <code>None</code>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXFloatingDialog.set_dialog_title","title":"set_dialog_title","text":"<pre><code>set_dialog_title(title: str = None) -&gt; None\n</code></pre> <p>Sets the dialog's title.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the dialog.</p> <code>None</code>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXFloatingDialog.show_under_cursor","title":"show_under_cursor","text":"<pre><code>show_under_cursor() -&gt; int\n</code></pre> <p>Moves the dialog to the current cursor position and displays it.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The result of the <code>QDialog exec_()</code> method, which is an integer. It returns a <code>DialogCode</code> that can be <code>Accepted</code> or <code>Rejected</code>.</p>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXSplashScreen","title":"VFXSplashScreen","text":"<p>             Bases: <code>QSplashScreen</code></p> <p>Customized QSplashScreen class.</p> <p>Parameters:</p> Name Type Description Default <code>image_path</code> <code>str</code> <p>Path to the image to be displayed on the splash screen.</p> <code>None</code> <code>icon</code> <code>str</code> <p>Path to the icon to be displayed on the splash screen.</p> <code>None</code> <code>title</code> <code>str</code> <p>Title text to be displayed. Defaults to <code>Untitled</code>.</p> <code>None</code> <code>information</code> <code>str</code> <p>Information text to be displayed. Defaults to a placeholder text.</p> <code>None</code> <code>show_progress_bar</code> <code>bool</code> <p>Whether to display a progress bar. Defaults to False.</p> <code>False</code> <code>project</code> <code>str</code> <p>Project name. Defaults to <code>N/A</code>.</p> <code>None</code> <code>version</code> <code>str</code> <p>Version information. Defaults to <code>v0.0.0</code>.</p> <code>None</code> <code>company</code> <code>str</code> <p>Company name. Defaults to <code>Company</code>.</p> <code>None</code> <code>accent_color</code> <code>str</code> <p>Accent color to be applied to the splash screen. Defaults to <code>#039492</code>.</p> <code>'#039492'</code> <code>fade_in</code> <code>bool</code> <p>Whether to apply a fade-in effect on the splash screen. Defaults to False.</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>pixmap</code> <code>QPixmap</code> <p>The image on the splash screen. Dewfaults to <code>splash.png</code>.</p> <code>icon</code> <code>QIcon</code> <p>The icon of the splash screen. Defaults to <code>favicon.png</code>.</p> <code>title</code> <code>str</code> <p>Title text to be displayed. Defaults to <code>Untitled</code>.</p> <code>information</code> <code>str</code> <p>Information text to be displayed. Defaults to a placeholder Lorem Ipsum text.</p> <code>show_progress_bar</code> <code>bool</code> <p>Whether to display a progress bar. Defaults to <code>False</code>.</p> <code>project</code> <code>str</code> <p>Project name. Defaults to <code>N/A</code>.</p> <code>version</code> <code>str</code> <p>Version information. Defaults to <code>v0.0.0</code>.</p> <code>company</code> <code>str</code> <p>Company name. Defaults to <code>Company</code>.</p> <code>accent_color</code> <code>str</code> <p>Accent color applied to the splash screen.</p> <code>fade_in</code> <code>bool</code> <p>Whether to apply a fade-in effect on the splash screen. Defaults to <code>False</code>.</p> <code>title_label</code> <code>QLabel</code> <p>Label for the title text.</p> <code>info_label</code> <code>QLabel</code> <p>Label for the information text.</p> <code>progress_bar</code> <code>QProgressBar</code> <p>Progress bar widget. Only created if <code>show_progress_bar</code> is <code>True</code>.</p> <code>copyright_label</code> <code>QLabel</code> <p>Label for the copyright information.</p> <code>fade_timer</code> <code>QTimer</code> <p>Timer for the fade-in effect. Only created if <code>fade_in</code> is <code>True</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; app = QApplication(sys.argv)\n&gt;&gt;&gt; splash = VFXSplashScreen(\n...     image_path=\"path_to_your_image.png\",\n...     title=\"My Awesome App\",\n...     information=\"Loading...\",\n...     show_progress_bar=True,\n...     project=\"Cool Project\",\n...     version=\"v1.2.3\",\n...     company=\"My Company Ltd.\",\n...     fade_in=True,\n... )\n&gt;&gt;&gt; splash.progress(50)\n&gt;&gt;&gt; splash.show()\n&gt;&gt;&gt; splash.progress(100)\n&gt;&gt;&gt; splash.close()\n&gt;&gt;&gt; sys.exit(app.exec_())\n</code></pre>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXWindow","title":"VFXWindow","text":"<p>             Bases: <code>QMainWindow</code></p>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXWindow.__init__","title":"__init__","text":"<pre><code>__init__(\n    parent: Optional[QWidget] = None,\n    icon: Optional[str] = None,\n    title: Optional[str] = None,\n    size: Optional[int] = None,\n    flags: Optional[WindowFlags] = None,\n    documentation: Optional[str] = None,\n    project: Optional[str] = None,\n    version: Optional[str] = None,\n    company: Optional[str] = None,\n    accent_color: str = \"#039492\",\n    ui_file: Optional[str] = None,\n    parent_package: Optional[int] = None,\n)\n</code></pre> <p>Customized QMainWindow class.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget</code> <p>Parent widget. Defaults to <code>hou.qt.mainWindow()</code>.</p> <code>None</code> <code>icon</code> <code>str</code> <p>Path to the window icon image. Defaults to <code>None</code>.</p> <code>None</code> <code>title</code> <code>str</code> <p>Title of the window. Defaults to <code>None</code>.</p> <code>None</code> <code>size</code> <code>Tuple[int, int]</code> <p>Window size as width and height. Defaults to <code>None</code>.</p> <code>None</code> <code>flags</code> <code>WindowFlags</code> <p>Window flags. Defaults to <code>None</code>.</p> <code>None</code> <code>documentation</code> <code>str</code> <p>URL to the tool's documentation. Defaults to <code>None</code>.</p> <code>None</code> <code>version</code> <code>str</code> <p>Version label for the window. Defaults to <code>None</code>.</p> <code>None</code> <code>company</code> <code>str</code> <p>Company name for the window. Defaults to <code>Company</code>.</p> <code>None</code> <code>accent_color</code> <code>str</code> <p>Accent color to be applied to the splash screen. Defaults to <code>#039492</code>.</p> <code>'#039492'</code> <code>ui_file</code> <code>str</code> <p>Path to the UI file for loading. Defaults to <code>None</code>.</p> <code>None</code> <code>parent_package</code> <code>int</code> <p>Whether the window is standalone application, or belongs to a DCC parent.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>window_icon</code> <code>QIcon</code> <p>The icon of the window.</p> <code>window_title</code> <code>str</code> <p>The title of the window.</p> <code>window_size</code> <code>QSize</code> <p>The size of the window.</p> <code>window_flags</code> <code>WindowFlags</code> <p>The window flags.</p> <code>documentation</code> <code>str</code> <p>The documentation string.</p> <code>project</code> <code>str</code> <p>The project name.</p> <code>version</code> <code>str</code> <p>The version string.</p> <code>company</code> <code>str</code> <p>The company name.</p> <code>accent_color</code> <code>str</code> <p>The accent color.</p> <code>ui_file</code> <code>str</code> <p>The UI file path.</p> <code>CRITICAL</code> <code>int</code> <p>Constant for critical log level.</p> <code>ERROR</code> <code>int</code> <p>Constant for error log level.</p> <code>WARNING</code> <code>int</code> <p>Constant for warning log level.</p> <code>SUCCESS</code> <code>int</code> <p>Constant for success log level.</p> <code>INFO</code> <code>int</code> <p>Constant for info log level.</p> <code>about_action</code> <code>QAction</code> <p>Action for the \"About\" menu item.</p> <code>hide_action</code> <code>QAction</code> <p>Action for the \"Hide\" menu item.</p> <code>hide_others_action</code> <code>QAction</code> <p>Action for the \"Hide Others\" menu item.</p> <code>close_action</code> <code>QAction</code> <p>Action for the \"Close\" menu item.</p> <code>check_updates_action</code> <code>QAction</code> <p>Action for the \"Check for Updates...\" menu item.</p> <code>settings_action</code> <code>QAction</code> <p>Action for the \"Settings\" menu item.</p> <code>window_on_top_action</code> <code>QAction</code> <p>Action for the \"Always On Top\" menu item.</p> <code>minimize_window_action</code> <code>QAction</code> <p>Action for the \"Minimize\" menu item.</p> <code>maximize_window_action</code> <code>QAction</code> <p>Action for the \"Maximize\" menu item.</p> <code>open_documentation_action</code> <code>QAction</code> <p>Action for the \"Documentation\" menu item.</p> <code>previous_action</code> <code>QAction</code> <p>Action for the \"Previous\" toolbar item.</p> <code>next_action</code> <code>QAction</code> <p>Action for the \"Next\" toolbar item.</p> <code>refresh_action</code> <code>QAction</code> <p>Action for the \"Refresh\" toolbar item.</p> <code>home_action</code> <code>QAction</code> <p>Action for the \"Home\" toolbar item.</p> <code>menu_bar</code> <code>QMenuBar</code> <p>The menu bar of the window.</p> <code>icon_menu</code> <code>QMenu</code> <p>The icon menu of the menu bar.</p> <code>main_menu</code> <code>QMenu</code> <p>The main menu of the menu bar.</p> <code>about_menu</code> <code>QAction</code> <p>The \"About\" menu item in the main menu.</p> <code>check_updates_menu</code> <code>QAction</code> <p>The \"Check for Updates...\" menu item in the main menu.</p> <code>close_menu</code> <code>QAction</code> <p>The \"Close\" menu item in the main menu.</p> <code>hide_main_menu</code> <code>QAction</code> <p>The \"Hide\" menu item in the main menu.</p> <code>hide_others_menu</code> <code>QAction</code> <p>The \"Hide Others\" menu item in the main menu.</p> <code>edit_menu</code> <code>QMenu</code> <p>The edit menu of the menu bar.</p> <code>settings_menu</code> <code>QAction</code> <p>The \"Settings\" menu item in the edit menu.</p> <code>window_menu</code> <code>QMenu</code> <p>The window menu of the menu bar.</p> <code>minimize_menu</code> <code>QAction</code> <p>The \"Minimize\" menu item in the window menu.</p> <code>maximize_menu</code> <code>QAction</code> <p>The \"Maximize\" menu item in the window menu.</p> <code>on_top_menu</code> <code>QAction</code> <p>The \"Always On Top\" menu item in the window menu.</p> <code>help_menu</code> <code>QMenu</code> <p>The help menu of the menu bar.</p> <code>open_documentation_menu</code> <code>QAction</code> <p>The \"Documentation\" menu item in the help menu.</p> <code>toolbar</code> <code>QToolBar</code> <p>The toolbar of the window.</p> <code>previous_toolbar</code> <code>QAction</code> <p>The \"Previous\" toolbar item.</p> <code>next_toolbar</code> <code>QAction</code> <p>The \"Next\" toolbar item.</p> <code>refresh_toolbar</code> <code>QAction</code> <p>The \"Refresh\" toolbar item.</p> <code>home_toolbar</code> <code>QAction</code> <p>The \"Home\" toolbar item.</p> <code>about_dialog</code> <code>QDialog</code> <p>The \"About\" dialog.</p> <code>status_bar</code> <code>QStatusBar</code> <p>The status bar of the window.</p> <code>project_label</code> <code>QLabel</code> <p>The project label in the status bar.</p> <code>version_label</code> <code>QLabel</code> <p>The version label in the status bar.</p> <code>company_label</code> <code>QLabel</code> <p>The company label in the status bar.</p> <p>Examples:</p> <p>Outside a DCC</p> <pre><code>&gt;&gt;&gt; app = QApplication(sys.argv)\n&gt;&gt;&gt; _window = VFXWindow(\n...     icon=\"path/to/icon.png\",\n...     title=\"My Custom Window\",\n...     size=(800, 600),\n...     documentation=\"https://my_tool_docs.com\",\n...     project=\"Awesome Project\",\n...     version=\"v1.0.0\",\n...     ui_file=\"path/to/ui_file.ui\",\n... )\n&gt;&gt;&gt; _window.show()\n&gt;&gt;&gt; _window.set_statusbar_message(\"Window initialized\", window.INFO)\n&gt;&gt;&gt; sys.exit(app.exec_())\n</code></pre> <p>Inside a DCC (Houdini)</p> <pre><code>&gt;&gt;&gt; houdini_window = dcc.get_houdini_main_window()\n&gt;&gt;&gt; houdini_style = dcc.get_houdini_stylesheet()\n&gt;&gt;&gt; _window = window.VFXWindow(\n...    parent=houdini_window,\n...    ui_file=\"path/to/ui_file.ui\",\n...   )\n&gt;&gt;&gt; _window.show()\n&gt;&gt;&gt; _window.set_statusbar_message(\"Window initialized\", window.INFO)\n</code></pre> <p>Hide toolbar and menu bar</p> <pre><code>&gt;&gt;&gt; houdini_window = dcc.get_houdini_main_window()\n&gt;&gt;&gt; houdini_style = dcc.get_houdini_stylesheet()\n&gt;&gt;&gt; _window = window.VFXWindow(\n...    parent=houdini_window,\n...    ui_file=\"path/to/ui_file.ui\",\n...   )\n&gt;&gt;&gt; _window.show()\n&gt;&gt;&gt; _window.hide_toolbar()\n&gt;&gt;&gt; _window.hide_menu_bar()\n</code></pre>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXWindow.hide_menu_bar","title":"hide_menu_bar","text":"<pre><code>hide_menu_bar() -&gt; None\n</code></pre> <p>Hide the menu bar.</p>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXWindow.hide_status_line","title":"hide_status_line","text":"<pre><code>hide_status_line() -&gt; None\n</code></pre> <p>Hide the status line.</p>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXWindow.hide_statusbar","title":"hide_statusbar","text":"<pre><code>hide_statusbar() -&gt; None\n</code></pre> <p>Hide the status bar.</p>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXWindow.hide_toolbar","title":"hide_toolbar","text":"<pre><code>hide_toolbar() -&gt; None\n</code></pre> <p>Hide the toolbar.</p>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXWindow.set_statusbar_message","title":"set_statusbar_message","text":"<pre><code>set_statusbar_message(\n    message: str,\n    severity_type: int = 4,\n    duration: float = 2.5,\n    time: bool = True,\n    logger: Optional[Logger] = None,\n    set_color: bool = False,\n) -&gt; None\n</code></pre> <p>Display a message in the status bar with a specified severity.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to be displayed.</p> required <code>severity_type</code> <code>int</code> <p>The severity level of the message. Should be one of <code>CRITICAL</code>, <code>ERROR</code>, <code>WARNING</code>, <code>SUCCESS</code>, or <code>INFO</code>. Defaults to <code>INFO</code>.</p> <code>4</code> <code>duration</code> <code>float</code> <p>The duration in seconds for which the message should be displayed. Defaults to<code>2.5</code>.</p> <code>2.5</code> <code>time</code> <code>bool</code> <p>Whether to display the current time before the message. Defaults to <code>True</code>.</p> <code>True</code> <code>logger</code> <code>Logger</code> <p>A logger object to log the message. Defaults to <code>None</code>.</p> <code>None</code> <p>Examples:</p> <p>To display a critical error message with a red background</p> <pre><code>&gt;&gt;&gt; self.set_statusbar_message(\n...     \"Critical error occurred!\",\n...     severity_type=self.CRITICAL,\n...     duration=5,\n...     logger=my_logger,\n... )\n</code></pre> Note <p>You can either use the window instance to retrieve the verbosity constants, or the window module.</p>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXWindow.show_menu_bar","title":"show_menu_bar","text":"<pre><code>show_menu_bar() -&gt; None\n</code></pre> <p>Show the menu bar.</p>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXWindow.show_status_line","title":"show_status_line","text":"<pre><code>show_status_line() -&gt; None\n</code></pre> <p>Show the status line.</p>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXWindow.show_statusbar","title":"show_statusbar","text":"<pre><code>show_statusbar() -&gt; None\n</code></pre> <p>Show the status bar.</p>"},{"location":"fxwidgets/#fxgui.fxwidgets.VFXWindow.show_toolbar","title":"show_toolbar","text":"<pre><code>show_toolbar() -&gt; None\n</code></pre> <p>Show the toolbar.</p>"}]}